IF TIME
let user load sample clause databases
add helpful educational tidbits
add helpful error messages about incorrect input
allow users to add unconsecutive p numbers
propogation button


Sally to do:
test!!!
test backtrack level

Julia to do:
(maybe) make graph database state section look nicer
refactor ts


QUESTIONS
-- J: error when the clause database is just 'p1' (finishes but returns satisfied: false)



DATA always contains:
new_nodes
finished
level
conflict
edges
decided
available
clause_sat = [T/F, T/F, ... for each clause]


CHANGES:
conflict is now false or an int value = how many simultaneous conflicts
if conflict is not false, still have conflict_info and reset, but reset does not include propogation
the new_nodes and decided lists involved in the conflict are now located in conflict_info. new_nodes and decided in data refer to the state of the graph after the conflict is resolved
conflict_info also contains all_clauses and clause_sat



***When a conflict leads directly to another conflict:
	conflict = int ()
	conflict_info1
	reset1
	propogation1
	conflict_info2
	reset2
	new_nodes, finished, level, etc (which is the state after the second propogation)



***FIRST check for conflict and display
***THEN check for finished - b/c if finished is true and conflict is true, must display conflict first
